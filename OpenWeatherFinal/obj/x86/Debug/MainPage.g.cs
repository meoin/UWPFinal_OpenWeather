#pragma checksum "C:\Users\Michael\Documents\NSCC\OpenWeatherFinal\OpenWeatherFinal\MainPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "74C02653DA4707F14664DDC75383D750"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OpenWeatherFinal
{
    partial class MainPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Data_CollectionViewSource_Source(global::Windows.UI.Xaml.Data.CollectionViewSource obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Source = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBox_Text(global::Windows.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MainPage_obj4_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::OpenWeatherFinal.Models.CityModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj4;
            private global::Windows.UI.Xaml.Documents.Run obj5;
            private global::Windows.UI.Xaml.Documents.Run obj6;
            private global::Windows.UI.Xaml.Documents.Run obj7;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj5TextDisabled = false;
            private static bool isobj6TextDisabled = false;
            private static bool isobj7TextDisabled = false;

            public MainPage_obj4_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 27 && columnNumber == 26)
                {
                    isobj5TextDisabled = true;
                }
                else if (lineNumber == 28 && columnNumber == 26)
                {
                    isobj6TextDisabled = true;
                }
                else if (lineNumber == 30 && columnNumber == 26)
                {
                    isobj7TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 4: // MainPage.xaml line 24
                        this.obj4 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.StackPanel)target);
                        break;
                    case 5: // MainPage.xaml line 27
                        this.obj5 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 6: // MainPage.xaml line 28
                        this.obj6 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 7: // MainPage.xaml line 30
                        this.obj7 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj4.Target as global::Windows.UI.Xaml.Controls.StackPanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::OpenWeatherFinal.Models.CityModel) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::OpenWeatherFinal.Models.CityModel)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::OpenWeatherFinal.Models.CityModel obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                        this.Update_State(obj.State, phase);
                        this.Update_Country(obj.Country, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 27
                    if (!isobj5TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj5, obj, null);
                    }
                }
            }
            private void Update_State(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 28
                    if (!isobj6TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj6, obj, null);
                    }
                }
            }
            private void Update_Country(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 30
                    if (!isobj7TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj7, obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MainPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::OpenWeatherFinal.MainPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Data.CollectionViewSource obj2;
            private global::Windows.UI.Xaml.Controls.TextBlock obj8;
            private global::Windows.UI.Xaml.Controls.TextBlock obj11;
            private global::Windows.UI.Xaml.Controls.TextBlock obj13;
            private global::Windows.UI.Xaml.Controls.TextBlock obj14;
            private global::Windows.UI.Xaml.Controls.TextBlock obj15;
            private global::Windows.UI.Xaml.Controls.TextBlock obj16;
            private global::Windows.UI.Xaml.Controls.TextBlock obj17;
            private global::Windows.UI.Xaml.Controls.TextBlock obj19;
            private global::Windows.UI.Xaml.Controls.TextBlock obj21;
            private global::Windows.UI.Xaml.Controls.TextBlock obj22;
            private global::Windows.UI.Xaml.Controls.TextBlock obj23;
            private global::Windows.UI.Xaml.Controls.TextBlock obj24;
            private global::Windows.UI.Xaml.Controls.TextBlock obj25;
            private global::Windows.UI.Xaml.Controls.TextBox obj26;
            private global::Windows.UI.Xaml.Controls.ListView obj27;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2SourceDisabled = false;
            private static bool isobj8TextDisabled = false;
            private static bool isobj11TextDisabled = false;
            private static bool isobj13TextDisabled = false;
            private static bool isobj14TextDisabled = false;
            private static bool isobj15TextDisabled = false;
            private static bool isobj16TextDisabled = false;
            private static bool isobj17TextDisabled = false;
            private static bool isobj19TextDisabled = false;
            private static bool isobj21TextDisabled = false;
            private static bool isobj22TextDisabled = false;
            private static bool isobj23TextDisabled = false;
            private static bool isobj24TextDisabled = false;
            private static bool isobj25TextDisabled = false;
            private static bool isobj26TextDisabled = false;
            private static bool isobj27SelectedItemDisabled = false;

            private MainPage_obj1_BindingsTracking bindingsTracking;

            public MainPage_obj1_Bindings()
            {
                this.bindingsTracking = new MainPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 20 && columnNumber == 37)
                {
                    isobj2SourceDisabled = true;
                }
                else if (lineNumber == 174 && columnNumber == 42)
                {
                    isobj8TextDisabled = true;
                }
                else if (lineNumber == 160 && columnNumber == 77)
                {
                    isobj11TextDisabled = true;
                }
                else if (lineNumber == 150 && columnNumber == 77)
                {
                    isobj13TextDisabled = true;
                }
                else if (lineNumber == 140 && columnNumber == 81)
                {
                    isobj14TextDisabled = true;
                }
                else if (lineNumber == 136 && columnNumber == 77)
                {
                    isobj15TextDisabled = true;
                }
                else if (lineNumber == 114 && columnNumber == 46)
                {
                    isobj16TextDisabled = true;
                }
                else if (lineNumber == 115 && columnNumber == 51)
                {
                    isobj17TextDisabled = true;
                }
                else if (lineNumber == 124 && columnNumber == 80)
                {
                    isobj19TextDisabled = true;
                }
                else if (lineNumber == 119 && columnNumber == 80)
                {
                    isobj21TextDisabled = true;
                }
                else if (lineNumber == 106 && columnNumber == 74)
                {
                    isobj22TextDisabled = true;
                }
                else if (lineNumber == 102 && columnNumber == 75)
                {
                    isobj23TextDisabled = true;
                }
                else if (lineNumber == 90 && columnNumber == 28)
                {
                    isobj24TextDisabled = true;
                }
                else if (lineNumber == 83 && columnNumber == 46)
                {
                    isobj25TextDisabled = true;
                }
                else if (lineNumber == 67 && columnNumber == 18)
                {
                    isobj26TextDisabled = true;
                }
                else if (lineNumber == 74 && columnNumber == 17)
                {
                    isobj27SelectedItemDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // MainPage.xaml line 19
                        this.obj2 = (global::Windows.UI.Xaml.Data.CollectionViewSource)target;
                        break;
                    case 8: // MainPage.xaml line 174
                        this.obj8 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        this.bindingsTracking.RegisterTwoWayListener_8(this.obj8);
                        break;
                    case 11: // MainPage.xaml line 160
                        this.obj11 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        this.bindingsTracking.RegisterTwoWayListener_11(this.obj11);
                        break;
                    case 13: // MainPage.xaml line 150
                        this.obj13 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        this.bindingsTracking.RegisterTwoWayListener_13(this.obj13);
                        break;
                    case 14: // MainPage.xaml line 140
                        this.obj14 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        this.bindingsTracking.RegisterTwoWayListener_14(this.obj14);
                        break;
                    case 15: // MainPage.xaml line 136
                        this.obj15 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        this.bindingsTracking.RegisterTwoWayListener_15(this.obj15);
                        break;
                    case 16: // MainPage.xaml line 114
                        this.obj16 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        this.bindingsTracking.RegisterTwoWayListener_16(this.obj16);
                        break;
                    case 17: // MainPage.xaml line 115
                        this.obj17 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        this.bindingsTracking.RegisterTwoWayListener_17(this.obj17);
                        break;
                    case 19: // MainPage.xaml line 124
                        this.obj19 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        this.bindingsTracking.RegisterTwoWayListener_19(this.obj19);
                        break;
                    case 21: // MainPage.xaml line 119
                        this.obj21 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        this.bindingsTracking.RegisterTwoWayListener_21(this.obj21);
                        break;
                    case 22: // MainPage.xaml line 106
                        this.obj22 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        this.bindingsTracking.RegisterTwoWayListener_22(this.obj22);
                        break;
                    case 23: // MainPage.xaml line 102
                        this.obj23 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        this.bindingsTracking.RegisterTwoWayListener_23(this.obj23);
                        break;
                    case 24: // MainPage.xaml line 90
                        this.obj24 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        this.bindingsTracking.RegisterTwoWayListener_24(this.obj24);
                        break;
                    case 25: // MainPage.xaml line 83
                        this.obj25 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        this.bindingsTracking.RegisterTwoWayListener_25(this.obj25);
                        break;
                    case 26: // MainPage.xaml line 66
                        this.obj26 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_26(this.obj26);
                        break;
                    case 27: // MainPage.xaml line 71
                        this.obj27 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        this.bindingsTracking.RegisterTwoWayListener_27(this.obj27);
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::OpenWeatherFinal.MainPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::OpenWeatherFinal.MainPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_CVM(obj.CVM, phase);
                    }
                }
            }
            private void Update_CVM(global::OpenWeatherFinal.ViewModels.CityViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_CVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_CVM_Cities(obj.Cities, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_CVM_UpdateTime(obj.UpdateTime, phase);
                        this.Update_CVM_CityPressure(obj.CityPressure, phase);
                        this.Update_CVM_CityHumidity(obj.CityHumidity, phase);
                        this.Update_CVM_CityWindDirection(obj.CityWindDirection, phase);
                        this.Update_CVM_CityWindSpeed(obj.CityWindSpeed, phase);
                        this.Update_CVM_CityTemperature(obj.CityTemperature, phase);
                        this.Update_CVM_CityFeelsLike(obj.CityFeelsLike, phase);
                        this.Update_CVM_CityTempMax(obj.CityTempMax, phase);
                        this.Update_CVM_CityTempMin(obj.CityTempMin, phase);
                        this.Update_CVM_CitySunset(obj.CitySunset, phase);
                        this.Update_CVM_CitySunrise(obj.CitySunrise, phase);
                        this.Update_CVM_CityTime(obj.CityTime, phase);
                        this.Update_CVM_CityName(obj.CityName, phase);
                        this.Update_CVM_Filter(obj.Filter, phase);
                        this.Update_CVM_SelectedCity(obj.SelectedCity, phase);
                    }
                }
            }
            private void Update_CVM_Cities(global::System.Collections.ObjectModel.ObservableCollection<global::OpenWeatherFinal.Models.CityModel> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 19
                    if (!isobj2SourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Data_CollectionViewSource_Source(this.obj2, obj, null);
                    }
                }
            }
            private void Update_CVM_UpdateTime(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 174
                    if (!isobj8TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj8, obj, null);
                    }
                }
            }
            private void Update_CVM_CityPressure(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 160
                    if (!isobj11TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj11, obj, null);
                    }
                }
            }
            private void Update_CVM_CityHumidity(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 150
                    if (!isobj13TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj13, obj, null);
                    }
                }
            }
            private void Update_CVM_CityWindDirection(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 140
                    if (!isobj14TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj14, obj, null);
                    }
                }
            }
            private void Update_CVM_CityWindSpeed(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 136
                    if (!isobj15TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj15, obj, null);
                    }
                }
            }
            private void Update_CVM_CityTemperature(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 114
                    if (!isobj16TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj16, obj, null);
                    }
                }
            }
            private void Update_CVM_CityFeelsLike(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 115
                    if (!isobj17TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj17, obj, null);
                    }
                }
            }
            private void Update_CVM_CityTempMax(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 124
                    if (!isobj19TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj19, obj, null);
                    }
                }
            }
            private void Update_CVM_CityTempMin(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 119
                    if (!isobj21TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj21, obj, null);
                    }
                }
            }
            private void Update_CVM_CitySunset(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 106
                    if (!isobj22TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj22, obj, null);
                    }
                }
            }
            private void Update_CVM_CitySunrise(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 102
                    if (!isobj23TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj23, obj, null);
                    }
                }
            }
            private void Update_CVM_CityTime(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 90
                    if (!isobj24TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj24, obj, null);
                    }
                }
            }
            private void Update_CVM_CityName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 83
                    if (!isobj25TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj25, obj, null);
                    }
                }
            }
            private void Update_CVM_Filter(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 66
                    if (!isobj26TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj26, obj, null);
                    }
                }
            }
            private void Update_CVM_SelectedCity(global::OpenWeatherFinal.Models.CityModel obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 71
                    if (!isobj27SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj27, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_8_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.CVM != null)
                        {
                            this.dataRoot.CVM.UpdateTime = this.obj8.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_11_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.CVM != null)
                        {
                            this.dataRoot.CVM.CityPressure = this.obj11.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_13_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.CVM != null)
                        {
                            this.dataRoot.CVM.CityHumidity = this.obj13.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_14_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.CVM != null)
                        {
                            this.dataRoot.CVM.CityWindDirection = this.obj14.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_15_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.CVM != null)
                        {
                            this.dataRoot.CVM.CityWindSpeed = this.obj15.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_16_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.CVM != null)
                        {
                            this.dataRoot.CVM.CityTemperature = this.obj16.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_17_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.CVM != null)
                        {
                            this.dataRoot.CVM.CityFeelsLike = this.obj17.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_19_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.CVM != null)
                        {
                            this.dataRoot.CVM.CityTempMax = this.obj19.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_21_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.CVM != null)
                        {
                            this.dataRoot.CVM.CityTempMin = this.obj21.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_22_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.CVM != null)
                        {
                            this.dataRoot.CVM.CitySunset = this.obj22.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_23_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.CVM != null)
                        {
                            this.dataRoot.CVM.CitySunrise = this.obj23.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_24_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.CVM != null)
                        {
                            this.dataRoot.CVM.CityTime = this.obj24.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_25_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.CVM != null)
                        {
                            this.dataRoot.CVM.CityName = this.obj25.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_26_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.CVM != null)
                        {
                            this.dataRoot.CVM.Filter = this.obj26.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_27_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.CVM != null)
                        {
                            this.dataRoot.CVM.SelectedCity = (global::OpenWeatherFinal.Models.CityModel)this.obj27.SelectedItem;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MainPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<MainPage_obj1_Bindings> weakRefToBindingObj; 

                public MainPage_obj1_BindingsTracking(MainPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MainPage_obj1_Bindings>(obj);
                }

                public MainPage_obj1_Bindings TryGetBindingObject()
                {
                    MainPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_CVM(null);
                }

                public void PropertyChanged_CVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::OpenWeatherFinal.ViewModels.CityViewModel obj = sender as global::OpenWeatherFinal.ViewModels.CityViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_CVM_UpdateTime(obj.UpdateTime, DATA_CHANGED);
                                bindings.Update_CVM_CityPressure(obj.CityPressure, DATA_CHANGED);
                                bindings.Update_CVM_CityHumidity(obj.CityHumidity, DATA_CHANGED);
                                bindings.Update_CVM_CityWindDirection(obj.CityWindDirection, DATA_CHANGED);
                                bindings.Update_CVM_CityWindSpeed(obj.CityWindSpeed, DATA_CHANGED);
                                bindings.Update_CVM_CityTemperature(obj.CityTemperature, DATA_CHANGED);
                                bindings.Update_CVM_CityFeelsLike(obj.CityFeelsLike, DATA_CHANGED);
                                bindings.Update_CVM_CityTempMax(obj.CityTempMax, DATA_CHANGED);
                                bindings.Update_CVM_CityTempMin(obj.CityTempMin, DATA_CHANGED);
                                bindings.Update_CVM_CitySunset(obj.CitySunset, DATA_CHANGED);
                                bindings.Update_CVM_CitySunrise(obj.CitySunrise, DATA_CHANGED);
                                bindings.Update_CVM_CityTime(obj.CityTime, DATA_CHANGED);
                                bindings.Update_CVM_CityName(obj.CityName, DATA_CHANGED);
                                bindings.Update_CVM_Filter(obj.Filter, DATA_CHANGED);
                                bindings.Update_CVM_SelectedCity(obj.SelectedCity, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "UpdateTime":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CVM_UpdateTime(obj.UpdateTime, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CityPressure":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CVM_CityPressure(obj.CityPressure, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CityHumidity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CVM_CityHumidity(obj.CityHumidity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CityWindDirection":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CVM_CityWindDirection(obj.CityWindDirection, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CityWindSpeed":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CVM_CityWindSpeed(obj.CityWindSpeed, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CityTemperature":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CVM_CityTemperature(obj.CityTemperature, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CityFeelsLike":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CVM_CityFeelsLike(obj.CityFeelsLike, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CityTempMax":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CVM_CityTempMax(obj.CityTempMax, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CityTempMin":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CVM_CityTempMin(obj.CityTempMin, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CitySunset":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CVM_CitySunset(obj.CitySunset, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CitySunrise":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CVM_CitySunrise(obj.CitySunrise, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CityTime":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CVM_CityTime(obj.CityTime, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CityName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CVM_CityName(obj.CityName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Filter":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CVM_Filter(obj.Filter, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedCity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CVM_SelectedCity(obj.SelectedCity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::OpenWeatherFinal.ViewModels.CityViewModel cache_CVM = null;
                public void UpdateChildListeners_CVM(global::OpenWeatherFinal.ViewModels.CityViewModel obj)
                {
                    if (obj != cache_CVM)
                    {
                        if (cache_CVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_CVM).PropertyChanged -= PropertyChanged_CVM;
                            cache_CVM = null;
                        }
                        if (obj != null)
                        {
                            cache_CVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_CVM;
                        }
                    }
                }
                public void RegisterTwoWayListener_8(global::Windows.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_8_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_11(global::Windows.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_11_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_13(global::Windows.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_13_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_14(global::Windows.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_14_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_15(global::Windows.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_15_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_16(global::Windows.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_16_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_17(global::Windows.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_17_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_19(global::Windows.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_19_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_21(global::Windows.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_21_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_22(global::Windows.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_22_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_23(global::Windows.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_23_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_24(global::Windows.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_24_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_25(global::Windows.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_25_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_26(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_26_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_27(global::Windows.UI.Xaml.Controls.ListView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_27_SelectedItem();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1: // MainPage.xaml line 1
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)(target);
                    ((global::Windows.UI.Xaml.Controls.Page)element1).Loaded += this.Page_Load;
                }
                break;
            case 2: // MainPage.xaml line 19
                {
                    this.CityCollection = (global::Windows.UI.Xaml.Data.CollectionViewSource)(target);
                }
                break;
            case 3: // MainPage.xaml line 23
                {
                    this.CityTemplate = (global::Windows.UI.Xaml.DataTemplate)(target);
                }
                break;
            case 9: // MainPage.xaml line 166
                {
                    global::Windows.UI.Xaml.Controls.Button element9 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)element9).Click += this.WeekForecast_Button;
                }
                break;
            case 10: // MainPage.xaml line 159
                {
                    this.PressureTitle = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 11: // MainPage.xaml line 160
                {
                    this.CityPressure = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 12: // MainPage.xaml line 149
                {
                    this.HumidityTitle = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 13: // MainPage.xaml line 150
                {
                    this.CityHumidity = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 14: // MainPage.xaml line 140
                {
                    this.CityWindDirection = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 15: // MainPage.xaml line 136
                {
                    this.CityWindSpeed = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 16: // MainPage.xaml line 114
                {
                    this.CityTemp = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 17: // MainPage.xaml line 115
                {
                    this.CityFeelsLike = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 18: // MainPage.xaml line 123
                {
                    this.TempMaxTitle = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 19: // MainPage.xaml line 124
                {
                    this.CityTempMax = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 20: // MainPage.xaml line 118
                {
                    this.TempMinTitle = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 21: // MainPage.xaml line 119
                {
                    this.CityTempMin = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 22: // MainPage.xaml line 106
                {
                    this.CitySunset = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 23: // MainPage.xaml line 102
                {
                    this.CitySunrise = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 25: // MainPage.xaml line 83
                {
                    this.CityName = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 26: // MainPage.xaml line 66
                {
                    this.FilterTxt = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                    ((global::Windows.UI.Xaml.Controls.TextBox)this.FilterTxt).KeyDown += this.Search_KeyDown;
                    ((global::Windows.UI.Xaml.Controls.TextBox)this.FilterTxt).TextChanged += this.FilterTxt_TextChanged;
                }
                break;
            case 27: // MainPage.xaml line 71
                {
                    this.FileListView = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    ((global::Windows.UI.Xaml.Controls.ListView)this.FileListView).SelectionChanged += this.OnSelectionChanged;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // MainPage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    MainPage_obj1_Bindings bindings = new MainPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 4: // MainPage.xaml line 24
                {                    
                    global::Windows.UI.Xaml.Controls.StackPanel element4 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                    MainPage_obj4_Bindings bindings = new MainPage_obj4_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element4.DataContext);
                    element4.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element4, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element4, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

